load("@npm//eslint:index.bzl", "eslint", "eslint_test")
load("@npm//@bazel/concatjs:index.bzl", "concatjs_devserver")
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("//samples:samples.bzl", "SAMPLES")

exports_files(
    [
        "LICENSE",
        ".eslintrc.json",
        ".babelrc",
        ".babelrc.jsfiddle.json",
        "package.json",
        "jest.config.js",
        "rollup.config.js",
        "tsconfig.json",
    ] + glob(["webpack.*.js"]),
    visibility = ["//:__subpackages__"],
)

concatjs_devserver(
    name = "serve",
    deps = [],
    static_files = [":index.html", "//samples:outputs"],
    port = 8080,
)

# CMD = '''
# set -e
# context="{\\"packages\\": {\n"
# packages=$$($(location @npm//lerna/bin:lerna) list)
# i=0
# for p in $$packages; do
#   if ((i > 0)); then
#     context="$${context},\\n"
#   fi
#   context="$${context}\\"$$($(location @npm//json/bin:json) -f samples/$$p/data.json title)\\": \\"$$p\\""
#   i=$$((i + 1))
# done

# context="$${context}}}"
# echo -e $${context} > $@
# '''

# Used to generate data.json
#
# genrule(
#     name = "data",
#     outs = ["data.json"],
#     cmd = CMD,
#     local = 1,
#     tools = [
#         "@npm//json/bin:json",
#         "@npm//lerna/bin:lerna",
#     ],
# )

genrule(
    name = "index",
    srcs = [
        ":data.json",
        ":index.njk",
        "//shared:templates",
    ],
    outs = ["index.html"],
    cmd = "$(location //rules:nunjucks-cli) $(location index.njk) $(location data.json) -p . && cat index.html > $@",
    tools = ["//rules:nunjucks-cli"],
)

ESLINT_DATA = [
    # config files
    ":.eslintrc.json",
    "//samples:.eslintrc.json",
    # plugins
    "@npm//eslint-config-prettier",
    "@npm//eslint-plugin-googlemaps",
    "@npm//eslint-plugin-jest",
    "@npm//eslint-plugin-prettier",
    "@npm//eslint-plugin-react",
    "@npm//@typescript-eslint/parser",
    "@npm//@typescript-eslint/eslint-plugin",
]

eslint_test(
    name = "eslint",
    args = [
        "--ignore-pattern webpack.config.js",
        "samples/**/*.ts",
    ],
    data = ESLINT_DATA + [
        "//samples:inputs",
    ],
)

eslint(
    name = "eslint-fix",
    args = [
        "samples/**/*.ts",
        "--ignore-pattern webpack.config.js",
        "--fix",
    ],
    data = ESLINT_DATA + [
        "//samples:inputs",
    ],
)


remap_files = [
    ["samples/{}/github.html", "samples/{}/index.html"],
]

remap_paths = {
    k.format(name): v.format(name) for k, v in remap_files for name in SAMPLES
}

pkg_tar(
    name = "public",
    srcs = [
        "//:index.html",
        "//samples:outputs",
    ],
    strip_prefix = ".",
    remap_paths = remap_paths,
)

sh_binary(
    name = "sample-to-branch",
    args = ["$(location :public.tar)"],
    srcs = ["sample-to-branch.sh"],
    data = [":public.tar"]
)
